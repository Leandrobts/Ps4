// js/core_exploit.mjs
import { AdvancedInt64 } from './int64.mjs';
// Renomeie 'log' importado para 'importedLog' para evitar conflito e deixar claro seu escopo.
import { log as importedLog, toHexS1, PAUSE_LAB } from './utils.mjs';
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;

export function getOOBAllocationSize() { updateOOBConfigFromUI(); return OOB_CONFIG.ALLOCATION_SIZE; }
export function getBaseOffsetInDV() { updateOOBConfigFromUI(); return OOB_CONFIG.BASE_OFFSET_IN_DV; }
export function getInitialBufferSize() { updateOOBConfigFromUI(); return OOB_CONFIG.INITIAL_BUFFER_SIZE; }
export function getJSCOffsets() { return JSC_OFFSETS; }

export async function triggerOOB_primitive() {
    const FNAME = 'CoreExploit.triggerOOB_primitive';
    updateOOBConfigFromUI();
    // As chamadas internas de log usarão 'importedLog' diretamente
    importedLog(`--- Iniciando ${FNAME} ---`, 'test', FNAME);
    importedLog(`   Config OOB: AllocSize=${OOB_CONFIG.ALLOCATION_SIZE}, BaseOffsetDV=${OOB_CONFIG.BASE_OFFSET_IN_DV}, InitialBufSize=${OOB_CONFIG.INITIAL_BUFFER_SIZE}`, 'info', FNAME);

    const writeValueToTriggerOOB = 0xEE;
    const oobWriteOffsetFromLogicalStart = OOB_CONFIG.INITIAL_BUFFER_SIZE;

    oob_array_buffer_real = null; oob_dataview_real = null;
    try {
        const totalSizeNeeded = OOB_CONFIG.BASE_OFFSET_IN_DV + oobWriteOffsetFromLogicalStart + OOB_CONFIG.ALLOCATION_SIZE + 64;
        oob_array_buffer_real = new ArrayBuffer(totalSizeNeeded);
        oob_dataview_real = new DataView(oob_array_buffer_real, OOB_CONFIG.BASE_OFFSET_IN_DV, OOB_CONFIG.ALLOCATION_SIZE);

        const initDV = new DataView(oob_array_buffer_real);
        for(let i=0; i < Math.min(16, OOB_CONFIG.BASE_OFFSET_IN_DV); i++) { initDV.setUint8(i, 0xAA); }
        for(let i=0; i < Math.min(16, oob_dataview_real.byteLength); i++) { oob_dataview_real.setUint8(i, 0xDD); }

        importedLog(`Primitiva OOB ATIVADA (simulada).`, 'vuln', FNAME);
        importedLog(`   oob_array_buffer_real (total): ${oob_array_buffer_real.byteLength} bytes`, 'info', FNAME);
        importedLog(`   oob_dataview_real (janela OOB): offset=${oob_dataview_real.byteOffset}, length=${oob_dataview_real.byteLength} bytes`, 'info', FNAME);
        importedLog(`   --> Leituras/escritas OOB relativas usarão offsets a partir de oob_dataview_real mais o BASE_OFFSET_IN_DV.`, 'info', FNAME);

    } catch (e) {
        importedLog(`ERRO ao tentar ativar primitiva OOB: ${e.message}`, "error", FNAME);
        console.error(e);
        oob_array_buffer_real = null;
        oob_dataview_real = null;
    }
    importedLog(`--- ${FNAME} Concluído ---`, 'test', FNAME);
}

export function oob_read_relative(relative_offset, byteLength = 4) {
    // As chamadas internas de log usarão 'importedLog'
    if (!oob_dataview_real || !oob_array_buffer_real) {
        importedLog("ERRO: Primitiva OOB não ativa para leitura.", "error", "CoreExploit.Read");
        throw new Error("OOB Read: Primitiva não ativa.");
    }
    const dv_offset = relative_offset - OOB_CONFIG.INITIAL_BUFFER_SIZE;

    if (dv_offset < -OOB_CONFIG.BASE_OFFSET_IN_DV || dv_offset + byteLength > oob_array_buffer_real.byteLength - OOB_CONFIG.BASE_OFFSET_IN_DV) {
        importedLog(`AVISO Leitura OOB: Offset ${dv_offset} (rel ${relative_offset}) pode estar fora dos limites do oob_array_buffer_real total.`, "warn", "CoreExploit.Read");
    }
    if (dv_offset < 0 || dv_offset + byteLength > oob_dataview_real.byteLength) {
         importedLog(`AVISO Leitura OOB: Offset ${dv_offset} (rel ${relative_offset}) está fora da JANELA INICIAL do oob_dataview_real (${oob_dataview_real.byteLength}b). Isso É OOB.`, "vuln", "CoreExploit.Read");
    }

    const tempView = new DataView(oob_array_buffer_real);
    const absoluteReadOffset = OOB_CONFIG.BASE_OFFSET_IN_DV + dv_offset;

    if (absoluteReadOffset < 0 || absoluteReadOffset + byteLength > oob_array_buffer_real.byteLength) {
        importedLog(`ERRO Leitura OOB: Offset absoluto ${absoluteReadOffset} (rel ${relative_offset}) está FORA dos limites do oob_array_buffer_real.`, "error", "CoreExploit.Read");
        throw new RangeError("OOB Read: Tentativa de leitura fora dos limites do buffer real.");
    }

    try {
        if (byteLength === 1) return tempView.getUint8(absoluteReadOffset);
        if (byteLength === 2) return tempView.getUint16(absoluteReadOffset, true);
        if (byteLength === 4) return tempView.getUint32(absoluteReadOffset, true);
        if (byteLength === 8) {
            const low = tempView.getUint32(absoluteReadOffset, true);
            const high = tempView.getUint32(absoluteReadOffset + 4, true);
            return new AdvancedInt64(low, high);
        }
        throw new Error("Tamanho de leitura OOB inválido: " + byteLength);
    } catch (e) {
        importedLog(`Exceção durante oob_read_relative em offset abs ${absoluteReadOffset} (rel ${relative_offset}): ${e.message}`, "error", "CoreExploit.Read");
        throw e;
    }
}

export function oob_write_relative(relative_offset, value, byteLength = 4) {
    // As chamadas internas de log usarão 'importedLog'
    if (!oob_dataview_real || !oob_array_buffer_real) {
        importedLog("ERRO: Primitiva OOB não ativa para escrita.", "error", "CoreExploit.Write");
        throw new Error("OOB Write: Primitiva não ativa.");
    }
    const dv_offset = relative_offset - OOB_CONFIG.INITIAL_BUFFER_SIZE;

    if (dv_offset < -OOB_CONFIG.BASE_OFFSET_IN_DV || dv_offset + byteLength > oob_array_buffer_real.byteLength - OOB_CONFIG.BASE_OFFSET_IN_DV) {
        importedLog(`AVISO Escrita OOB: Offset ${dv_offset} (rel ${relative_offset}) pode estar fora dos limites do oob_array_buffer_real total.`, "warn", "CoreExploit.Write");
    }
    if (dv_offset < 0 || dv_offset + byteLength > oob_dataview_real.byteLength) {
        importedLog(`AVISO Escrita OOB: Offset ${dv_offset} (rel ${relative_offset}) está fora da JANELA INICIAL do oob_dataview_real (${oob_dataview_real.byteLength}b). Isso É OOB.`, "vuln", "CoreExploit.Write");
    }

    const tempView = new DataView(oob_array_buffer_real);
    const absoluteWriteOffset = OOB_CONFIG.BASE_OFFSET_IN_DV + dv_offset;

    if (absoluteWriteOffset < 0 || absoluteWriteOffset + byteLength > oob_array_buffer_real.byteLength) {
        importedLog(`ERRO Escrita OOB: Offset absoluto ${absoluteWriteOffset} (rel ${relative_offset}) está FORA dos limites do oob_array_buffer_real.`, "error", "CoreExploit.Write");
        throw new RangeError("OOB Write: Tentativa de escrita fora dos limites do buffer real.");
    }
    
    try {
        if (byteLength === 1) return tempView.setUint8(absoluteWriteOffset, value);
        if (byteLength === 2) return tempView.setUint16(absoluteWriteOffset, value, true);
        if (byteLength === 4) return tempView.setUint32(absoluteWriteOffset, value, true);
        if (byteLength === 8 && value instanceof AdvancedInt64) {
            tempView.setUint32(absoluteWriteOffset, value.low(), true);
            tempView.setUint32(absoluteWriteOffset + 4, value.high(), true);
            return;
        }
        if (byteLength === 8 && typeof value === 'number') {
             tempView.setUint32(absoluteWriteOffset, value, true);
             tempView.setUint32(absoluteWriteOffset + 4, (value < 0 ? 0xFFFFFFFF : 0), true);
             return;
        }
        throw new Error("Tamanho/valor de escrita OOB inválido: " + byteLength);
    } catch (e) {
        importedLog(`Exceção durante oob_write_relative em offset abs ${absoluteWriteOffset} (rel ${relative_offset}): ${e.message}`, "error", "CoreExploit.Write");
        throw e;
    }
}

export function testModule(logFnParam) {
    const FNAME_TEST = "CoreExploit.testModule";
    // Use a variável local 'currentLog' para as mensagens de log desta função.
    // Se logFnParam (appLog de app.mjs) for fornecida, use-a. Caso contrário, use 'importedLog'.
    const currentLog = logFnParam || importedLog;
    
    currentLog(`--- Testando Módulo CoreExploit (core_exploit.mjs) ---`, "test", FNAME_TEST);
    triggerOOB_primitive(); // Esta função usará 'importedLog' para seus logs internos.
    if (!oob_dataview_real) {
        currentLog("Falha ao ativar primitiva OOB. Teste abortado.", "error", FNAME_TEST);
        return; // Não há necessidade de restaurar 'currentLog', pois é uma variável local.
    }

    const test_rel_offset = OOB_CONFIG.INITIAL_BUFFER_SIZE + 0;
    const test_val32 = 0x12345678;
    const test_val64 = new AdvancedInt64("0xAABBCCDDEEFF0011");

    try {
        currentLog(`Escrevendo ${toHexS1(test_val32)} em offset relativo ${test_rel_offset}`, "info", FNAME_TEST);
        // As funções oob_write_relative e oob_read_relative usarão 'importedLog' internamente.
        oob_write_relative(test_rel_offset, test_val32, 4);
        const read_val32 = oob_read_relative(test_rel_offset, 4);
        if (read_val32 === test_val32) {
            currentLog(`SUCESSO: Lido ${toHexS1(read_val32)} corretamente (32bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${toHexS1(read_val32)}, esperado ${toHexS1(test_val32)}.`, "error", FNAME_TEST);
        }

        const next_offset = test_rel_offset + 4;
        currentLog(`Escrevendo ${test_val64.toString(true)} em offset relativo ${next_offset}`, "info", FNAME_TEST);
        oob_write_relative(next_offset, test_val64, 8);
        const read_val64 = oob_read_relative(next_offset, 8);
        if (read_val64 && read_val64.low() === test_val64.low() && read_val64.high() === test_val64.high()) {
            currentLog(`SUCESSO: Lido ${read_val64.toString(true)} corretamente (64bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${read_val64 ? read_val64.toString(true) : 'ERRO_LEITURA'}, esperado ${test_val64.toString(true)}.`, "error", FNAME_TEST);
        }
    } catch (e) {
        currentLog(`ERRO durante o teste do módulo CoreExploit: ${e.message}`, "error", FNAME_TEST);
    }
    currentLog(`--- Teste CoreExploit Concluído ---`, "test", FNAME_TEST);
    // Não há necessidade de restaurar 'currentLog'. O 'importedLog' original permanece inalterado no escopo do módulo.
}
